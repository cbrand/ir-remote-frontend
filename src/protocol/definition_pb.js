/* eslint-disable */
// source: definition.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.remote.Command', null, global);
goog.exportSymbol('proto.remote.DescriptiveScene', null, global);
goog.exportSymbol('proto.remote.Function', null, global);
goog.exportSymbol('proto.remote.ISCPCommand', null, global);
goog.exportSymbol('proto.remote.Instruction', null, global);
goog.exportSymbol('proto.remote.IscpStatus', null, global);
goog.exportSymbol('proto.remote.IscpStatusResponse', null, global);
goog.exportSymbol('proto.remote.NECCommand', null, global);
goog.exportSymbol('proto.remote.PlayResponse', null, global);
goog.exportSymbol('proto.remote.RC6Command', null, global);
goog.exportSymbol('proto.remote.Remote', null, global);
goog.exportSymbol('proto.remote.RemoteStatus', null, global);
goog.exportSymbol('proto.remote.Repeat', null, global);
goog.exportSymbol('proto.remote.Scene', null, global);
goog.exportSymbol('proto.remote.Theater', null, global);
goog.exportSymbol('proto.remote.TheatersResponse', null, global);
goog.exportSymbol('proto.remote.Wait', null, global);
goog.exportSymbol('proto.remote.playCommandParams', null, global);
goog.exportSymbol('proto.remote.playSceneParams', null, global);
goog.exportSymbol('proto.remote.remoteQueryParams', null, global);
goog.exportSymbol('proto.remote.removeTheaterQueryParams', null, global);
goog.exportSymbol('proto.remote.setTheaterQueryParams', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.Remote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.Remote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.Remote.displayName = 'proto.remote.Remote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.RemoteStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.RemoteStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.RemoteStatus.displayName = 'proto.remote.RemoteStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.Command.displayName = 'proto.remote.Command';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.NECCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.NECCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.NECCommand.displayName = 'proto.remote.NECCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.RC6Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.RC6Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.RC6Command.displayName = 'proto.remote.RC6Command';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.ISCPCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.ISCPCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.ISCPCommand.displayName = 'proto.remote.ISCPCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.Scene = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.remote.Scene.repeatedFields_, null);
};
goog.inherits(proto.remote.Scene, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.Scene.displayName = 'proto.remote.Scene';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.Repeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.Repeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.Repeat.displayName = 'proto.remote.Repeat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.Instruction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.Instruction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.Instruction.displayName = 'proto.remote.Instruction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.Wait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.Wait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.Wait.displayName = 'proto.remote.Wait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.DescriptiveScene = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.DescriptiveScene, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.DescriptiveScene.displayName = 'proto.remote.DescriptiveScene';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.Theater = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.remote.Theater.repeatedFields_, null);
};
goog.inherits(proto.remote.Theater, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.Theater.displayName = 'proto.remote.Theater';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.TheatersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.remote.TheatersResponse.repeatedFields_, null);
};
goog.inherits(proto.remote.TheatersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.TheatersResponse.displayName = 'proto.remote.TheatersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.IscpStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.IscpStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.IscpStatus.displayName = 'proto.remote.IscpStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.IscpStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.remote.IscpStatusResponse.repeatedFields_, null);
};
goog.inherits(proto.remote.IscpStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.IscpStatusResponse.displayName = 'proto.remote.IscpStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.remoteQueryParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.remoteQueryParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.remoteQueryParams.displayName = 'proto.remote.remoteQueryParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.playSceneParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.playSceneParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.playSceneParams.displayName = 'proto.remote.playSceneParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.playCommandParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.playCommandParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.playCommandParams.displayName = 'proto.remote.playCommandParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.PlayResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.PlayResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.PlayResponse.displayName = 'proto.remote.PlayResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.setTheaterQueryParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.setTheaterQueryParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.setTheaterQueryParams.displayName = 'proto.remote.setTheaterQueryParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.removeTheaterQueryParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.removeTheaterQueryParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.remote.removeTheaterQueryParams.displayName = 'proto.remote.removeTheaterQueryParams';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.Remote.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.Remote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.Remote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.Remote.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mqtttopicprefix: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.Remote}
 */
proto.remote.Remote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.Remote;
  return proto.remote.Remote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.Remote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.Remote}
 */
proto.remote.Remote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqtttopicprefix(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.Remote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.Remote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.Remote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.Remote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMqtttopicprefix();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.remote.Remote.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.Remote} returns this
 */
proto.remote.Remote.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string mqttTopicPrefix = 2;
 * @return {string}
 */
proto.remote.Remote.prototype.getMqtttopicprefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.Remote} returns this
 */
proto.remote.Remote.prototype.setMqtttopicprefix = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.remote.Remote.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.Remote} returns this
 */
proto.remote.Remote.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.RemoteStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.RemoteStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.RemoteStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.RemoteStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    lifesign: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lastcommand: (f = msg.getLastcommand()) && proto.remote.Command.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.RemoteStatus}
 */
proto.remote.RemoteStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.RemoteStatus;
  return proto.remote.RemoteStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.RemoteStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.RemoteStatus}
 */
proto.remote.RemoteStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLifesign(value);
      break;
    case 4:
      var value = new proto.remote.Command;
      reader.readMessage(value,proto.remote.Command.deserializeBinaryFromReader);
      msg.setLastcommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.RemoteStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.RemoteStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.RemoteStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.RemoteStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getLifesign();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLastcommand();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.remote.Command.serializeBinaryToWriter
    );
  }
};


/**
 * optional string remoteId = 1;
 * @return {string}
 */
proto.remote.RemoteStatus.prototype.getRemoteid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.RemoteStatus} returns this
 */
proto.remote.RemoteStatus.prototype.setRemoteid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool online = 2;
 * @return {boolean}
 */
proto.remote.RemoteStatus.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.remote.RemoteStatus} returns this
 */
proto.remote.RemoteStatus.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string lifesign = 3;
 * @return {string}
 */
proto.remote.RemoteStatus.prototype.getLifesign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.RemoteStatus} returns this
 */
proto.remote.RemoteStatus.prototype.setLifesign = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Command lastCommand = 4;
 * @return {?proto.remote.Command}
 */
proto.remote.RemoteStatus.prototype.getLastcommand = function() {
  return /** @type{?proto.remote.Command} */ (
    jspb.Message.getWrapperField(this, proto.remote.Command, 4));
};


/**
 * @param {?proto.remote.Command|undefined} value
 * @return {!proto.remote.RemoteStatus} returns this
*/
proto.remote.RemoteStatus.prototype.setLastcommand = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.remote.RemoteStatus} returns this
 */
proto.remote.RemoteStatus.prototype.clearLastcommand = function() {
  return this.setLastcommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.remote.RemoteStatus.prototype.hasLastcommand = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.Command.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.Command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.Command.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    command: (f = msg.getCommand()) && proto.remote.NECCommand.toObject(includeInstance, f),
    rc6Command: (f = msg.getRc6Command()) && proto.remote.RC6Command.toObject(includeInstance, f),
    iscpCommand: (f = msg.getIscpCommand()) && proto.remote.ISCPCommand.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.Command}
 */
proto.remote.Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.Command;
  return proto.remote.Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.Command}
 */
proto.remote.Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.remote.NECCommand;
      reader.readMessage(value,proto.remote.NECCommand.deserializeBinaryFromReader);
      msg.setCommand(value);
      break;
    case 3:
      var value = new proto.remote.RC6Command;
      reader.readMessage(value,proto.remote.RC6Command.deserializeBinaryFromReader);
      msg.setRc6Command(value);
      break;
    case 4:
      var value = new proto.remote.ISCPCommand;
      reader.readMessage(value,proto.remote.ISCPCommand.deserializeBinaryFromReader);
      msg.setIscpCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.Command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommand();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.remote.NECCommand.serializeBinaryToWriter
    );
  }
  f = message.getRc6Command();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.remote.RC6Command.serializeBinaryToWriter
    );
  }
  f = message.getIscpCommand();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.remote.ISCPCommand.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.remote.Command.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.Command} returns this
 */
proto.remote.Command.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NECCommand command = 2;
 * @return {?proto.remote.NECCommand}
 */
proto.remote.Command.prototype.getCommand = function() {
  return /** @type{?proto.remote.NECCommand} */ (
    jspb.Message.getWrapperField(this, proto.remote.NECCommand, 2));
};


/**
 * @param {?proto.remote.NECCommand|undefined} value
 * @return {!proto.remote.Command} returns this
*/
proto.remote.Command.prototype.setCommand = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.remote.Command} returns this
 */
proto.remote.Command.prototype.clearCommand = function() {
  return this.setCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.remote.Command.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RC6Command rc6_command = 3;
 * @return {?proto.remote.RC6Command}
 */
proto.remote.Command.prototype.getRc6Command = function() {
  return /** @type{?proto.remote.RC6Command} */ (
    jspb.Message.getWrapperField(this, proto.remote.RC6Command, 3));
};


/**
 * @param {?proto.remote.RC6Command|undefined} value
 * @return {!proto.remote.Command} returns this
*/
proto.remote.Command.prototype.setRc6Command = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.remote.Command} returns this
 */
proto.remote.Command.prototype.clearRc6Command = function() {
  return this.setRc6Command(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.remote.Command.prototype.hasRc6Command = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ISCPCommand iscp_command = 4;
 * @return {?proto.remote.ISCPCommand}
 */
proto.remote.Command.prototype.getIscpCommand = function() {
  return /** @type{?proto.remote.ISCPCommand} */ (
    jspb.Message.getWrapperField(this, proto.remote.ISCPCommand, 4));
};


/**
 * @param {?proto.remote.ISCPCommand|undefined} value
 * @return {!proto.remote.Command} returns this
*/
proto.remote.Command.prototype.setIscpCommand = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.remote.Command} returns this
 */
proto.remote.Command.prototype.clearIscpCommand = function() {
  return this.setIscpCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.remote.Command.prototype.hasIscpCommand = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.NECCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.NECCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.NECCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.NECCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    command: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.NECCommand}
 */
proto.remote.NECCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.NECCommand;
  return proto.remote.NECCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.NECCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.NECCommand}
 */
proto.remote.NECCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.NECCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.NECCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.NECCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.NECCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCommand();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 deviceId = 1;
 * @return {number}
 */
proto.remote.NECCommand.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.remote.NECCommand} returns this
 */
proto.remote.NECCommand.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 command = 2;
 * @return {number}
 */
proto.remote.NECCommand.prototype.getCommand = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.remote.NECCommand} returns this
 */
proto.remote.NECCommand.prototype.setCommand = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.RC6Command.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.RC6Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.RC6Command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.RC6Command.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    control: jspb.Message.getFieldWithDefault(msg, 2, 0),
    information: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.RC6Command}
 */
proto.remote.RC6Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.RC6Command;
  return proto.remote.RC6Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.RC6Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.RC6Command}
 */
proto.remote.RC6Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setControl(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInformation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.RC6Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.RC6Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.RC6Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.RC6Command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getControl();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getInformation();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 mode = 1;
 * @return {number}
 */
proto.remote.RC6Command.prototype.getMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.remote.RC6Command} returns this
 */
proto.remote.RC6Command.prototype.setMode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 control = 2;
 * @return {number}
 */
proto.remote.RC6Command.prototype.getControl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.remote.RC6Command} returns this
 */
proto.remote.RC6Command.prototype.setControl = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 information = 3;
 * @return {number}
 */
proto.remote.RC6Command.prototype.getInformation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.remote.RC6Command} returns this
 */
proto.remote.RC6Command.prototype.setInformation = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.ISCPCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.ISCPCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.ISCPCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.ISCPCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    command: jspb.Message.getFieldWithDefault(msg, 2, ""),
    argument: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.ISCPCommand}
 */
proto.remote.ISCPCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.ISCPCommand;
  return proto.remote.ISCPCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.ISCPCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.ISCPCommand}
 */
proto.remote.ISCPCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setArgument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.ISCPCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.ISCPCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.ISCPCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.ISCPCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommand();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArgument();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.remote.ISCPCommand.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.ISCPCommand} returns this
 */
proto.remote.ISCPCommand.prototype.setIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string command = 2;
 * @return {string}
 */
proto.remote.ISCPCommand.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.ISCPCommand} returns this
 */
proto.remote.ISCPCommand.prototype.setCommand = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string argument = 3;
 * @return {string}
 */
proto.remote.ISCPCommand.prototype.getArgument = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.ISCPCommand} returns this
 */
proto.remote.ISCPCommand.prototype.setArgument = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.remote.Scene.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.Scene.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.Scene.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.Scene} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.Scene.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionsList: jspb.Message.toObjectList(msg.getInstructionsList(),
    proto.remote.Instruction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.Scene}
 */
proto.remote.Scene.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.Scene;
  return proto.remote.Scene.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.Scene} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.Scene}
 */
proto.remote.Scene.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.remote.Instruction;
      reader.readMessage(value,proto.remote.Instruction.deserializeBinaryFromReader);
      msg.addInstructions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.Scene.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.Scene.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.Scene} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.Scene.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.remote.Instruction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Instruction instructions = 2;
 * @return {!Array<!proto.remote.Instruction>}
 */
proto.remote.Scene.prototype.getInstructionsList = function() {
  return /** @type{!Array<!proto.remote.Instruction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.remote.Instruction, 2));
};


/**
 * @param {!Array<!proto.remote.Instruction>} value
 * @return {!proto.remote.Scene} returns this
*/
proto.remote.Scene.prototype.setInstructionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.remote.Instruction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.remote.Instruction}
 */
proto.remote.Scene.prototype.addInstructions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.remote.Instruction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.remote.Scene} returns this
 */
proto.remote.Scene.prototype.clearInstructionsList = function() {
  return this.setInstructionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.Repeat.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.Repeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.Repeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.Repeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    times: jspb.Message.getFieldWithDefault(msg, 1, 0),
    instruction: (f = msg.getInstruction()) && proto.remote.Instruction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.Repeat}
 */
proto.remote.Repeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.Repeat;
  return proto.remote.Repeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.Repeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.Repeat}
 */
proto.remote.Repeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimes(value);
      break;
    case 2:
      var value = new proto.remote.Instruction;
      reader.readMessage(value,proto.remote.Instruction.deserializeBinaryFromReader);
      msg.setInstruction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.Repeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.Repeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.Repeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.Repeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInstruction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.remote.Instruction.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 times = 1;
 * @return {number}
 */
proto.remote.Repeat.prototype.getTimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.remote.Repeat} returns this
 */
proto.remote.Repeat.prototype.setTimes = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Instruction instruction = 2;
 * @return {?proto.remote.Instruction}
 */
proto.remote.Repeat.prototype.getInstruction = function() {
  return /** @type{?proto.remote.Instruction} */ (
    jspb.Message.getWrapperField(this, proto.remote.Instruction, 2));
};


/**
 * @param {?proto.remote.Instruction|undefined} value
 * @return {!proto.remote.Repeat} returns this
*/
proto.remote.Repeat.prototype.setInstruction = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.remote.Repeat} returns this
 */
proto.remote.Repeat.prototype.clearInstruction = function() {
  return this.setInstruction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.remote.Repeat.prototype.hasInstruction = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.Instruction.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.Instruction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.Instruction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.Instruction.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: (f = msg.getCommand()) && proto.remote.Command.toObject(includeInstance, f),
    scene: (f = msg.getScene()) && proto.remote.Scene.toObject(includeInstance, f),
    repeat: (f = msg.getRepeat()) && proto.remote.Repeat.toObject(includeInstance, f),
    wait: (f = msg.getWait()) && proto.remote.Wait.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.Instruction}
 */
proto.remote.Instruction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.Instruction;
  return proto.remote.Instruction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.Instruction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.Instruction}
 */
proto.remote.Instruction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.remote.Command;
      reader.readMessage(value,proto.remote.Command.deserializeBinaryFromReader);
      msg.setCommand(value);
      break;
    case 2:
      var value = new proto.remote.Scene;
      reader.readMessage(value,proto.remote.Scene.deserializeBinaryFromReader);
      msg.setScene(value);
      break;
    case 3:
      var value = new proto.remote.Repeat;
      reader.readMessage(value,proto.remote.Repeat.deserializeBinaryFromReader);
      msg.setRepeat(value);
      break;
    case 4:
      var value = new proto.remote.Wait;
      reader.readMessage(value,proto.remote.Wait.deserializeBinaryFromReader);
      msg.setWait(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.Instruction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.Instruction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.Instruction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.Instruction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.remote.Command.serializeBinaryToWriter
    );
  }
  f = message.getScene();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.remote.Scene.serializeBinaryToWriter
    );
  }
  f = message.getRepeat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.remote.Repeat.serializeBinaryToWriter
    );
  }
  f = message.getWait();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.remote.Wait.serializeBinaryToWriter
    );
  }
};


/**
 * optional Command command = 1;
 * @return {?proto.remote.Command}
 */
proto.remote.Instruction.prototype.getCommand = function() {
  return /** @type{?proto.remote.Command} */ (
    jspb.Message.getWrapperField(this, proto.remote.Command, 1));
};


/**
 * @param {?proto.remote.Command|undefined} value
 * @return {!proto.remote.Instruction} returns this
*/
proto.remote.Instruction.prototype.setCommand = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.remote.Instruction} returns this
 */
proto.remote.Instruction.prototype.clearCommand = function() {
  return this.setCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.remote.Instruction.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Scene scene = 2;
 * @return {?proto.remote.Scene}
 */
proto.remote.Instruction.prototype.getScene = function() {
  return /** @type{?proto.remote.Scene} */ (
    jspb.Message.getWrapperField(this, proto.remote.Scene, 2));
};


/**
 * @param {?proto.remote.Scene|undefined} value
 * @return {!proto.remote.Instruction} returns this
*/
proto.remote.Instruction.prototype.setScene = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.remote.Instruction} returns this
 */
proto.remote.Instruction.prototype.clearScene = function() {
  return this.setScene(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.remote.Instruction.prototype.hasScene = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Repeat repeat = 3;
 * @return {?proto.remote.Repeat}
 */
proto.remote.Instruction.prototype.getRepeat = function() {
  return /** @type{?proto.remote.Repeat} */ (
    jspb.Message.getWrapperField(this, proto.remote.Repeat, 3));
};


/**
 * @param {?proto.remote.Repeat|undefined} value
 * @return {!proto.remote.Instruction} returns this
*/
proto.remote.Instruction.prototype.setRepeat = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.remote.Instruction} returns this
 */
proto.remote.Instruction.prototype.clearRepeat = function() {
  return this.setRepeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.remote.Instruction.prototype.hasRepeat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Wait wait = 4;
 * @return {?proto.remote.Wait}
 */
proto.remote.Instruction.prototype.getWait = function() {
  return /** @type{?proto.remote.Wait} */ (
    jspb.Message.getWrapperField(this, proto.remote.Wait, 4));
};


/**
 * @param {?proto.remote.Wait|undefined} value
 * @return {!proto.remote.Instruction} returns this
*/
proto.remote.Instruction.prototype.setWait = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.remote.Instruction} returns this
 */
proto.remote.Instruction.prototype.clearWait = function() {
  return this.setWait(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.remote.Instruction.prototype.hasWait = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.Wait.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.Wait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.Wait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.Wait.toObject = function(includeInstance, msg) {
  var f, obj = {
    seconds: jspb.Message.getFieldWithDefault(msg, 1, 0),
    milliseconds: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.Wait}
 */
proto.remote.Wait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.Wait;
  return proto.remote.Wait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.Wait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.Wait}
 */
proto.remote.Wait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeconds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMilliseconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.Wait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.Wait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.Wait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.Wait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeconds();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMilliseconds();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 seconds = 1;
 * @return {number}
 */
proto.remote.Wait.prototype.getSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.remote.Wait} returns this
 */
proto.remote.Wait.prototype.setSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 milliseconds = 2;
 * @return {number}
 */
proto.remote.Wait.prototype.getMilliseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.remote.Wait} returns this
 */
proto.remote.Wait.prototype.setMilliseconds = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.DescriptiveScene.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.DescriptiveScene.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.DescriptiveScene} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.DescriptiveScene.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sortkey: jspb.Message.getFieldWithDefault(msg, 4, 0),
    scene: (f = msg.getScene()) && proto.remote.Scene.toObject(includeInstance, f),
    pb_function: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.DescriptiveScene}
 */
proto.remote.DescriptiveScene.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.DescriptiveScene;
  return proto.remote.DescriptiveScene.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.DescriptiveScene} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.DescriptiveScene}
 */
proto.remote.DescriptiveScene.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSortkey(value);
      break;
    case 5:
      var value = new proto.remote.Scene;
      reader.readMessage(value,proto.remote.Scene.deserializeBinaryFromReader);
      msg.setScene(value);
      break;
    case 6:
      var value = /** @type {!proto.remote.Function} */ (reader.readEnum());
      msg.setFunction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.DescriptiveScene.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.DescriptiveScene.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.DescriptiveScene} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.DescriptiveScene.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSortkey();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getScene();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.remote.Scene.serializeBinaryToWriter
    );
  }
  f = message.getFunction();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.remote.DescriptiveScene.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.DescriptiveScene} returns this
 */
proto.remote.DescriptiveScene.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.remote.DescriptiveScene.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.DescriptiveScene} returns this
 */
proto.remote.DescriptiveScene.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.remote.DescriptiveScene.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.DescriptiveScene} returns this
 */
proto.remote.DescriptiveScene.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 sortKey = 4;
 * @return {number}
 */
proto.remote.DescriptiveScene.prototype.getSortkey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.remote.DescriptiveScene} returns this
 */
proto.remote.DescriptiveScene.prototype.setSortkey = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Scene scene = 5;
 * @return {?proto.remote.Scene}
 */
proto.remote.DescriptiveScene.prototype.getScene = function() {
  return /** @type{?proto.remote.Scene} */ (
    jspb.Message.getWrapperField(this, proto.remote.Scene, 5));
};


/**
 * @param {?proto.remote.Scene|undefined} value
 * @return {!proto.remote.DescriptiveScene} returns this
*/
proto.remote.DescriptiveScene.prototype.setScene = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.remote.DescriptiveScene} returns this
 */
proto.remote.DescriptiveScene.prototype.clearScene = function() {
  return this.setScene(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.remote.DescriptiveScene.prototype.hasScene = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Function function = 6;
 * @return {!proto.remote.Function}
 */
proto.remote.DescriptiveScene.prototype.getFunction = function() {
  return /** @type {!proto.remote.Function} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.remote.Function} value
 * @return {!proto.remote.DescriptiveScene} returns this
 */
proto.remote.DescriptiveScene.prototype.setFunction = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.remote.Theater.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.Theater.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.Theater.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.Theater} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.Theater.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    remoteid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sortkey: jspb.Message.getFieldWithDefault(msg, 4, 0),
    scenesList: jspb.Message.toObjectList(msg.getScenesList(),
    proto.remote.DescriptiveScene.toObject, includeInstance),
    icon: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.Theater}
 */
proto.remote.Theater.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.Theater;
  return proto.remote.Theater.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.Theater} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.Theater}
 */
proto.remote.Theater.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSortkey(value);
      break;
    case 5:
      var value = new proto.remote.DescriptiveScene;
      reader.readMessage(value,proto.remote.DescriptiveScene.deserializeBinaryFromReader);
      msg.addScenes(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.Theater.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.Theater.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.Theater} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.Theater.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRemoteid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSortkey();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getScenesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.remote.DescriptiveScene.serializeBinaryToWriter
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.remote.Theater.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.Theater} returns this
 */
proto.remote.Theater.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.remote.Theater.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.Theater} returns this
 */
proto.remote.Theater.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string remoteId = 3;
 * @return {string}
 */
proto.remote.Theater.prototype.getRemoteid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.Theater} returns this
 */
proto.remote.Theater.prototype.setRemoteid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 sortKey = 4;
 * @return {number}
 */
proto.remote.Theater.prototype.getSortkey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.remote.Theater} returns this
 */
proto.remote.Theater.prototype.setSortkey = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated DescriptiveScene scenes = 5;
 * @return {!Array<!proto.remote.DescriptiveScene>}
 */
proto.remote.Theater.prototype.getScenesList = function() {
  return /** @type{!Array<!proto.remote.DescriptiveScene>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.remote.DescriptiveScene, 5));
};


/**
 * @param {!Array<!proto.remote.DescriptiveScene>} value
 * @return {!proto.remote.Theater} returns this
*/
proto.remote.Theater.prototype.setScenesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.remote.DescriptiveScene=} opt_value
 * @param {number=} opt_index
 * @return {!proto.remote.DescriptiveScene}
 */
proto.remote.Theater.prototype.addScenes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.remote.DescriptiveScene, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.remote.Theater} returns this
 */
proto.remote.Theater.prototype.clearScenesList = function() {
  return this.setScenesList([]);
};


/**
 * optional string icon = 6;
 * @return {string}
 */
proto.remote.Theater.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.Theater} returns this
 */
proto.remote.Theater.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.remote.TheatersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.TheatersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.TheatersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.TheatersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.TheatersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    theatersList: jspb.Message.toObjectList(msg.getTheatersList(),
    proto.remote.Theater.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.TheatersResponse}
 */
proto.remote.TheatersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.TheatersResponse;
  return proto.remote.TheatersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.TheatersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.TheatersResponse}
 */
proto.remote.TheatersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.remote.Theater;
      reader.readMessage(value,proto.remote.Theater.deserializeBinaryFromReader);
      msg.addTheaters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.TheatersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.TheatersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.TheatersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.TheatersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTheatersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.remote.Theater.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Theater theaters = 1;
 * @return {!Array<!proto.remote.Theater>}
 */
proto.remote.TheatersResponse.prototype.getTheatersList = function() {
  return /** @type{!Array<!proto.remote.Theater>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.remote.Theater, 1));
};


/**
 * @param {!Array<!proto.remote.Theater>} value
 * @return {!proto.remote.TheatersResponse} returns this
*/
proto.remote.TheatersResponse.prototype.setTheatersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.remote.Theater=} opt_value
 * @param {number=} opt_index
 * @return {!proto.remote.Theater}
 */
proto.remote.TheatersResponse.prototype.addTheaters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.remote.Theater, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.remote.TheatersResponse} returns this
 */
proto.remote.TheatersResponse.prototype.clearTheatersList = function() {
  return this.setTheatersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.IscpStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.IscpStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.IscpStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.IscpStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    modelname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    areacode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    devicecategory: jspb.Message.getFieldWithDefault(msg, 4, ""),
    iscpport: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.IscpStatus}
 */
proto.remote.IscpStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.IscpStatus;
  return proto.remote.IscpStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.IscpStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.IscpStatus}
 */
proto.remote.IscpStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAreacode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicecategory(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIscpport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.IscpStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.IscpStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.IscpStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.IscpStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getModelname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAreacode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDevicecategory();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIscpport();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.remote.IscpStatus.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.IscpStatus} returns this
 */
proto.remote.IscpStatus.prototype.setIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string modelName = 2;
 * @return {string}
 */
proto.remote.IscpStatus.prototype.getModelname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.IscpStatus} returns this
 */
proto.remote.IscpStatus.prototype.setModelname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string areaCode = 3;
 * @return {string}
 */
proto.remote.IscpStatus.prototype.getAreacode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.IscpStatus} returns this
 */
proto.remote.IscpStatus.prototype.setAreacode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string deviceCategory = 4;
 * @return {string}
 */
proto.remote.IscpStatus.prototype.getDevicecategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.IscpStatus} returns this
 */
proto.remote.IscpStatus.prototype.setDevicecategory = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string iscpPort = 5;
 * @return {string}
 */
proto.remote.IscpStatus.prototype.getIscpport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.IscpStatus} returns this
 */
proto.remote.IscpStatus.prototype.setIscpport = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.remote.IscpStatusResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.IscpStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.IscpStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.IscpStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.IscpStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicesList: jspb.Message.toObjectList(msg.getDevicesList(),
    proto.remote.IscpStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.IscpStatusResponse}
 */
proto.remote.IscpStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.IscpStatusResponse;
  return proto.remote.IscpStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.IscpStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.IscpStatusResponse}
 */
proto.remote.IscpStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.remote.IscpStatus;
      reader.readMessage(value,proto.remote.IscpStatus.deserializeBinaryFromReader);
      msg.addDevices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.IscpStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.IscpStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.IscpStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.IscpStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.remote.IscpStatus.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IscpStatus devices = 1;
 * @return {!Array<!proto.remote.IscpStatus>}
 */
proto.remote.IscpStatusResponse.prototype.getDevicesList = function() {
  return /** @type{!Array<!proto.remote.IscpStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.remote.IscpStatus, 1));
};


/**
 * @param {!Array<!proto.remote.IscpStatus>} value
 * @return {!proto.remote.IscpStatusResponse} returns this
*/
proto.remote.IscpStatusResponse.prototype.setDevicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.remote.IscpStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.remote.IscpStatus}
 */
proto.remote.IscpStatusResponse.prototype.addDevices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.remote.IscpStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.remote.IscpStatusResponse} returns this
 */
proto.remote.IscpStatusResponse.prototype.clearDevicesList = function() {
  return this.setDevicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.remoteQueryParams.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.remoteQueryParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.remoteQueryParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.remoteQueryParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.remoteQueryParams}
 */
proto.remote.remoteQueryParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.remoteQueryParams;
  return proto.remote.remoteQueryParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.remoteQueryParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.remoteQueryParams}
 */
proto.remote.remoteQueryParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.remoteQueryParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.remoteQueryParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.remoteQueryParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.remoteQueryParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.remote.remoteQueryParams.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.remoteQueryParams} returns this
 */
proto.remote.remoteQueryParams.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.playSceneParams.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.playSceneParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.playSceneParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.playSceneParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scene: (f = msg.getScene()) && proto.remote.Scene.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.playSceneParams}
 */
proto.remote.playSceneParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.playSceneParams;
  return proto.remote.playSceneParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.playSceneParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.playSceneParams}
 */
proto.remote.playSceneParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteid(value);
      break;
    case 2:
      var value = new proto.remote.Scene;
      reader.readMessage(value,proto.remote.Scene.deserializeBinaryFromReader);
      msg.setScene(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.playSceneParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.playSceneParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.playSceneParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.playSceneParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScene();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.remote.Scene.serializeBinaryToWriter
    );
  }
};


/**
 * optional string remoteId = 1;
 * @return {string}
 */
proto.remote.playSceneParams.prototype.getRemoteid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.playSceneParams} returns this
 */
proto.remote.playSceneParams.prototype.setRemoteid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Scene scene = 2;
 * @return {?proto.remote.Scene}
 */
proto.remote.playSceneParams.prototype.getScene = function() {
  return /** @type{?proto.remote.Scene} */ (
    jspb.Message.getWrapperField(this, proto.remote.Scene, 2));
};


/**
 * @param {?proto.remote.Scene|undefined} value
 * @return {!proto.remote.playSceneParams} returns this
*/
proto.remote.playSceneParams.prototype.setScene = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.remote.playSceneParams} returns this
 */
proto.remote.playSceneParams.prototype.clearScene = function() {
  return this.setScene(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.remote.playSceneParams.prototype.hasScene = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.playCommandParams.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.playCommandParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.playCommandParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.playCommandParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    command: (f = msg.getCommand()) && proto.remote.Command.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.playCommandParams}
 */
proto.remote.playCommandParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.playCommandParams;
  return proto.remote.playCommandParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.playCommandParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.playCommandParams}
 */
proto.remote.playCommandParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteid(value);
      break;
    case 2:
      var value = new proto.remote.Command;
      reader.readMessage(value,proto.remote.Command.deserializeBinaryFromReader);
      msg.setCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.playCommandParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.playCommandParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.playCommandParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.playCommandParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommand();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.remote.Command.serializeBinaryToWriter
    );
  }
};


/**
 * optional string remoteId = 1;
 * @return {string}
 */
proto.remote.playCommandParams.prototype.getRemoteid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.playCommandParams} returns this
 */
proto.remote.playCommandParams.prototype.setRemoteid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Command command = 2;
 * @return {?proto.remote.Command}
 */
proto.remote.playCommandParams.prototype.getCommand = function() {
  return /** @type{?proto.remote.Command} */ (
    jspb.Message.getWrapperField(this, proto.remote.Command, 2));
};


/**
 * @param {?proto.remote.Command|undefined} value
 * @return {!proto.remote.playCommandParams} returns this
*/
proto.remote.playCommandParams.prototype.setCommand = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.remote.playCommandParams} returns this
 */
proto.remote.playCommandParams.prototype.clearCommand = function() {
  return this.setCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.remote.playCommandParams.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.PlayResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.PlayResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.PlayResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.PlayResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.PlayResponse}
 */
proto.remote.PlayResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.PlayResponse;
  return proto.remote.PlayResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.PlayResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.PlayResponse}
 */
proto.remote.PlayResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.PlayResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.PlayResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.PlayResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.PlayResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.remote.PlayResponse.prototype.getOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.remote.PlayResponse} returns this
 */
proto.remote.PlayResponse.prototype.setOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.setTheaterQueryParams.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.setTheaterQueryParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.setTheaterQueryParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.setTheaterQueryParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    theater: (f = msg.getTheater()) && proto.remote.Theater.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.setTheaterQueryParams}
 */
proto.remote.setTheaterQueryParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.setTheaterQueryParams;
  return proto.remote.setTheaterQueryParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.setTheaterQueryParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.setTheaterQueryParams}
 */
proto.remote.setTheaterQueryParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteid(value);
      break;
    case 2:
      var value = new proto.remote.Theater;
      reader.readMessage(value,proto.remote.Theater.deserializeBinaryFromReader);
      msg.setTheater(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.setTheaterQueryParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.setTheaterQueryParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.setTheaterQueryParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.setTheaterQueryParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTheater();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.remote.Theater.serializeBinaryToWriter
    );
  }
};


/**
 * optional string remoteId = 1;
 * @return {string}
 */
proto.remote.setTheaterQueryParams.prototype.getRemoteid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.setTheaterQueryParams} returns this
 */
proto.remote.setTheaterQueryParams.prototype.setRemoteid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Theater theater = 2;
 * @return {?proto.remote.Theater}
 */
proto.remote.setTheaterQueryParams.prototype.getTheater = function() {
  return /** @type{?proto.remote.Theater} */ (
    jspb.Message.getWrapperField(this, proto.remote.Theater, 2));
};


/**
 * @param {?proto.remote.Theater|undefined} value
 * @return {!proto.remote.setTheaterQueryParams} returns this
*/
proto.remote.setTheaterQueryParams.prototype.setTheater = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.remote.setTheaterQueryParams} returns this
 */
proto.remote.setTheaterQueryParams.prototype.clearTheater = function() {
  return this.setTheater(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.remote.setTheaterQueryParams.prototype.hasTheater = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.removeTheaterQueryParams.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.removeTheaterQueryParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.removeTheaterQueryParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.removeTheaterQueryParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    theaterid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.removeTheaterQueryParams}
 */
proto.remote.removeTheaterQueryParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.removeTheaterQueryParams;
  return proto.remote.removeTheaterQueryParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.removeTheaterQueryParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.removeTheaterQueryParams}
 */
proto.remote.removeTheaterQueryParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTheaterid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.removeTheaterQueryParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.removeTheaterQueryParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.removeTheaterQueryParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.remote.removeTheaterQueryParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTheaterid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string remoteId = 1;
 * @return {string}
 */
proto.remote.removeTheaterQueryParams.prototype.getRemoteid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.removeTheaterQueryParams} returns this
 */
proto.remote.removeTheaterQueryParams.prototype.setRemoteid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string theaterId = 2;
 * @return {string}
 */
proto.remote.removeTheaterQueryParams.prototype.getTheaterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.remote.removeTheaterQueryParams} returns this
 */
proto.remote.removeTheaterQueryParams.prototype.setTheaterid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.remote.Function = {
  POWER_TOGGLE: 0,
  UP: 1,
  RIGHT: 2,
  DOWN: 3,
  LEFT: 4,
  OK: 5,
  BACK: 6,
  EXIT: 7,
  POWER_ON: 8,
  POWER_OFF: 9,
  VOLUME_UP: 10,
  VOLUME_DOWN: 11,
  PROGRAM_UP: 12,
  PROGRAM_DOWN: 13,
  ZERO: 20,
  ONE: 21,
  TWO: 22,
  THREE: 23,
  FOUR: 24,
  FIVE: 25,
  SIX: 26,
  SEVEN: 27,
  EIGHT: 28,
  NINE: 29,
  VOLUME_MUTE: 30,
  PLAY: 31,
  PAUSE: 32,
  PLAY_PAUSE: 33,
  STOP: 34,
  FAST_FORWARD: 35,
  FAST_REWIND: 36,
  SUBTITLE: 37,
  LANGUAGE: 38,
  MENU: 39
};

goog.object.extend(exports, proto.remote);
